pipeline {
    agent any
    parameters {
        string(name: 'APP_VERSION', defaultValue: '1.0.0', description: 'Version to deploy')
        string(name: 'ENVIRONMENT', defaultValue: 'green', description: 'Deployment environment (blue or green)')
        booleanParam(name: 'SWITCH_TRAFFIC', defaultValue: true, description: 'Switch traffic to new environment?')
        booleanParam(name: 'ROLLBACK_ENABLED', defaultValue: true, description: 'Enable rollback on failure?')
    }
    environment {
        KUBE_NAMESPACE = 'dev'  // Set Kubernetes namespace if not already defined
        KUBE_SERVER_URL = 'https://DDA40494B0CB1765ACFA939C48DE4F1E.sk1.us-east-1.eks.amazonaws.com'  // Your EKS server URL
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Clone Repository') {
            steps {
                script {
                    // Clone the repository into the 'source' directory
                    dir('source') {
                        // Clean up the directory if it already exists
                        // Clone the repository from GitHub
                        git branch: 'master', url: "https://github.com/Mohan14242/blue.git"
                    }
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    // Build the Docker image inside the 'source' directory
                    dir('source') {
                        sh """
                         docker build -t blue-green:${params.APP_VERSION} .
                        """
                    }
                }
            }
        }
        stage('tagging the docker image'){
            steps{
                script{
                    sh """
                    docker tag blue-green:${params.APP_VERSION} mohan14242/blue-green:${params.APP_VERSION}"""
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    // Push the Docker image to Docker registry
                    dir('source') {
                        docker.withRegistry('https://registry.hub.docker.com', 'docker_credentials') {  
                            docker.image("mohan14242/blue-green:${params.APP_VERSION}").push()
                        }
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Use withKubeConfig to perform Kubernetes actions
                    dir('source') {
                        withKubeConfig(
                            caCertificate: '',  // Specify the CA certificate if needed
                            clusterName: 'eks-spot-cluster',  // The name of your EKS cluster
                            contextName: '',  // Optionally specify a Kubernetes context name
                            credentialsId: 'k8-token',  // ID of the Kubernetes credentials stored in Jenkins
                            namespace: KUBE_NAMESPACE,  // Set namespace for Kubernetes resources
                            restrictKubeConfigAccess: false,  // Set to false to allow unrestricted access
                            serverUrl: KUBE_SERVER_URL  // Kubernetes server URL (EKS endpoint)
                        ) {
                            // Deploy to Blue or Green environment based on the user's choice
                            if (params.ENVIRONMENT == 'blue') {
                                echo "Deploying to Blue Environment with version ${params.APP_VERSION}"
                                // Deploy to Blue (assuming Blue is the current version)
                                sh 'kubectl apply -f blue-deployment.yml -n ${KUBE_NAMESPACE}'
                                sh 'kubectl apply -f loadbalancer.yml -n ${KUBE_NAMESPACE}'
                            } else if (params.ENVIRONMENT == 'green') {
                                echo "Deploying to Green Environment with version ${params.APP_VERSION}"
                                // Deploy to Green (new version)
                                sh 'kubectl apply -f green-deployment.yml -n ${KUBE_NAMESPACE}'
                                sh 'kubectl apply -f node-port.yaml -n ${KUBE_NAMESPACE}'
                            }
                        }
                    }
                }
            }
        }
        stage('Tester Test Green Environment') {
            steps {
                script {
                    if (params.ENVIRONMENT == 'green') {
                        echo "Waiting for tester to test the Green environment application."
                        // Prompt tester to manually test the Green environment
                        input message: 'Tester, please verify the application in Green environment. Approve to continue.',
                              ok: 'Approve',
                              parameters: [booleanParam(defaultValue: false, description: 'Tested successfully?', name: 'tester_tested')]
                    }
                }
            }
        }
        stage('Switch Traffic to Green') {
            when {
                expression { return params.SWITCH_TRAFFIC && params.tester_tested }
            }
            steps {
                script {
                    echo "Switching traffic to Green environment "
                    // Use Kubernetes `kubectl` to switch traffic to Green environment
                    dir('source') {
                        withKubeConfig(
                            caCertificate: '',  // Specify the CA certificate if needed
                            clusterName: 'eks-spot-cluster',  // The name of your EKS cluster
                            contextName: '',  // Optionally specify a Kubernetes context name
                            credentialsId: 'k8-token',  // ID of the Kubernetes credentials stored in Jenkins
                            namespace: KUBE_NAMESPACE,  // Set namespace for Kubernetes resources
                            restrictKubeConfigAccess: false,  // Set to false to allow unrestricted access
                            serverUrl: KUBE_SERVER_URL  // Kubernetes server URL (EKS endpoint)
                        ) {
                            // Change Kubernetes service selector to route traffic to Green
                            sh 'kubectl patch service my-app -p "{\"spec\": {\"selector\": {\"app\": \"my-app\", \"environment\": \"green\"}}}"'
                        }
                    }
                }
            }
        }
        stage('Bug Detected - Rollback') {
            when {
                expression { return !params.tester_tested }
            }
            steps {
                script {
                    echo "Bug detected in the Green environment, requesting rollback."
                    input message: 'A bug was found in Green environment. Manager, please approve to rollback to Blue.',
                          parameters: [booleanParam(defaultValue: false, description: 'Manager Approval to Rollback?', name: 'manager_approval')]
                }
            }
        }
        stage('Rollback to Blue Environment') {
            when {
                expression { return params.manager_approval }
            }
            steps {
                script {
                    echo "Rolling back to Blue environment"
                    // Rollback to the Blue version by redeploying Blue
                    dir('source') {
                        withKubeConfig(
                            caCertificate: '',  // Specify the CA certificate if needed
                            clusterName: 'eks-spot-cluster',  // The name of your EKS cluster
                            contextName: '',  // Optionally specify a Kubernetes context name
                            credentialsId: 'k8-token',  // ID of the Kubernetes credentials stored in Jenkins
                            namespace: KUBE_NAMESPACE,  // Set namespace for Kubernetes resources
                            restrictKubeConfigAccess: false,  // Set to false to allow unrestricted access
                            serverUrl: KUBE_SERVER_URL  // Kubernetes server URL (EKS endpoint)
                        ) {
                            echo "Rolling back to Blue environment"
                            // Rollback to Blue by redeploying the Blue YAML configuration
                            sh 'kubectl apply -f blue-deployment.yml -n ${KUBE_NAMESPACE}'
                            // Switch traffic back to Blue
                            sh 'kubectl patch service my-app -p "{\"spec\": {\"selector\": {\"app\": \"my-app\", \"environment\": \"blue\"}}}" -n ${KUBE_NAMESPACE}'
                        }
                    }
                }
            }
        }
    }
}
